from aiogram import Router, F, Bot, types
from aiogram.filters import Command
from aiogram.types import Message, PreCheckoutQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import Dispatcher
import asyncio
import logging
from aiogram import Router, F, Bot, types
from aiogram.filters import Command
from aiogram.types import Message, PreCheckoutQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import Dispatcher
import asyncio
import logging
import mysql.connector

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = '7079394719:AAHWyslDgeCfWSYnrJ9VvCZDOP5jt9qAeJM'
AUTHORIZED_USER_ID = 5881427442  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
logging.basicConfig(level=logging.INFO)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
active_broadcasts = {}

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token='7079394719:AAHWyslDgeCfWSYnrJ9VvCZDOP5jt9qAeJM')
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)
router = Router()

@dp.pre_checkout_query()
async def checkout_handler(checkout_query: PreCheckoutQuery):
    await checkout_query.answer(ok=True)

@dp.message(F.successful_payment)
async def star_payment(msg: Message, bot: Bot):
    await msg.answer(f"Id —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {msg.successful_payment.telegram_payment_charge_id}")

@router.message(Command("start"))
async def start_command_handler(message: Message):
    user_language = message.from_user.language_code
    chats_url = {
        'uk': 'https://t.me/+RXe8EdjeWp9iODdi',
        'ru': 'https://t.me/+cPskObB_bTNjOTgy',
        'uz': 'https://t.me/+nY5ngmDOlmQ4OGVi',
        'ka': 'https://t.me/+VNNjtXc9379mMWYy',
        'en': 'https://t.me/+iyTLN7PksNVmYmJi',
        'hy': 'https://t.me/+V4CWk93cC89lNzgy',
        'kk': 'https://t.me/+ZIysQ0YFahI5Mzli',
        'es': 'https://t.me/+vpP9oiulLqE3ODgy',
        'tr': 'https://t.me/+rRdKUd7i9U5lYzcy',
        'hi': 'https://t.me/+U07GlOiVClZkZDRi'
    }
    url = chats_url.get(user_language, chats_url['en'])  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ò–≥—Ä—É üéÆ", url="https://t.me/ylionminerbot/ylionminer")],
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ö–∞–Ω–∞–ª üîî", url="https://t.me/ylionminer")],
        [InlineKeyboardButton(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ß–∞—Ç—É üì•", url=url)],
        [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üë®üèª‚Äçüíª", url="https://t.me/supylionbot")],
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YLION MINER! –¢–µ–ø–µ—Ä—å –≤—ã ‚Äî –æ–±–ª–∞–¥–∞—Ç–µ–ª—å —Å–≤–æ–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –º–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º—ã.\n\n"
        "–ö–∞—á–∞–π—Ç–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–¥–Ω–∏–º–∞—Ç—å –ø—Ä–∏–±—ã–ª—å. "
        "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö.",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /send
@router.message(Command("send"))
async def send_command_handler(message: Message):
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    active_broadcasts[message.from_user.id] = {'status': 'awaiting_message'}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /send)
@router.message()
async def handle_broadcast_message(message: Message):
    if message.from_user.id not in active_broadcasts or active_broadcasts[message.from_user.id]['status'] != 'awaiting_message':
        return

    broadcast_message = message.text
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞.")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    users_with_access = await get_users_with_access()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id in users_with_access:
        try:
            await bot.send_message(user_id, broadcast_message)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
    del active_broadcasts[message.from_user.id]

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def get_users_with_access():
    try:
        connection = mysql.connector.connect(
            user='django',
            password='zY7S1iof7dw&',
            host='localhost',
            database='mydatabase'
        )
        cursor = connection.cursor()
        cursor.execute("SELECT user_id FROM mainapp_telegramuser")
        users = cursor.fetchall()
        cursor.close()
        connection.close()
        return [user_id[0] for user_id in users]
    except mysql.connector.Error as err:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {err}")
        return []

async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.include_router(router)

    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main(), debug=True)